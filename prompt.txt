I am creating a react-flow project. Below are my files.
./src/App.tsx
import React from 'react';
import Flow from './Flow';
import './index.css'; // Ensure Tailwind is loaded

function App() {
  return (
    // The Flow component now includes the Sidebar internally
    <Flow />
  );
}

export default App;


./src/Flow.tsx
// File: Flow.tsx

import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react';
import ReactFlow, {
  Controls,
  Background,
  applyNodeChanges,
  applyEdgeChanges,
  addEdge,
  Node,
  Edge,
  NodeChange,
  EdgeChange,
  Connection,
  DefaultEdgeOptions,
  NodeTypes,
  OnSelectionChangeParams,
  useReactFlow,
  ReactFlowProvider,
  XYPosition,
  MarkerType,
} from 'reactflow';
import 'reactflow/dist/style.css';
import { Bot, Zap, FlagOff, Plus, X, Settings, PlayCircle } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

import StartNode from './components/nodes/StartNode';
import IntentNode from './components/nodes/IntentNode';
import ActionNode from './components/nodes/ActionNode';
import EndNode from './components/nodes/EndNode';
import Sidebar from './components/Sidebar';

const initialNodes: Node[] = [
  { id: '0', type: 'start', position: { x: 50, y: 200 }, data: {} },
  { id: '1', type: 'intent', position: { x: 300, y: 200 }, data: { intentId: 'intent_greet', examples: ['hello', 'hi', 'hey'] } },
  {
    id: '2',
    type: 'action',
    position: { x: 550, y: 200 },
    data: {
      title: 'Send Greeting', // Added title
      name: 'SendMessage',
      value: 'Hello! How can I help you today?',
      valueType: 'text' // Added valueType
    }
  },
  { id: '3', type: 'end', position: { x: 800, y: 200 }, data: {} },
];

const initialEdges: Edge[] = [
  { id: 'e0-1', source: '0', target: '1', animated: true, style: { strokeWidth: 2 } },
  { id: 'e1-2', source: '1', target: '2', animated: true, style: { strokeWidth: 2 } },
  { id: 'e2-3', source: '2', target: '3', style: { strokeWidth: 2 } },
];

const defaultEdgeOptions: DefaultEdgeOptions = {
  style: { stroke: '#9ca3af' },
  markerEnd: { type: MarkerType.ArrowClosed, color: '#9ca3af', width: 20, height: 20 },
};

const getId = () => `dndnode_${+new Date()}`;

function FlowContent() {
  const [nodes, setNodes] = useState<Node[]>(initialNodes);
  const [edges, setEdges] = useState<Edge[]>(initialEdges);
  const [selectedNode, setSelectedNode] = useState<Node | null>(null);
  const [isFabMenuOpen, setIsFabMenuOpen] = useState(false);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const fabRef = useRef<HTMLDivElement>(null);
  const { setNodes: rfSetNodes, getNodes, addNodes, screenToFlowPosition } = useReactFlow();

  // State for defined actions (could come from API/storage later)
  const [definedActions, setDefinedActions] = useState<ActionDefinition[]>([
    { title: 'Send Message', name: 'SendMessage', value: 'Default message text...', valueType: 'text' },
    { title: 'API Call', name: 'ApiCall', value: 'https://api.example.com/data', valueType: 'text' },
    { title: 'Transfer to Agent', name: 'TransferToAgent', value: 'support_queue', valueType: 'text' },
    { title: 'Update Context', name: 'UpdateContext', value: '{ "user_status": "verified" }', valueType: 'text' },
    { title: 'Get User Data', name: 'GetUserDataFunc', value: 'getUserData', valueType: 'function' },
  ]);

  const nodeTypes: NodeTypes = useMemo(() => ({
    start: StartNode,
    intent: IntentNode,
    action: ActionNode,
    end: EndNode,
  }), []);

  const onNodesChange = useCallback((changes: NodeChange[]) => setNodes((nds) => applyNodeChanges(changes, nds)), [setNodes]);
  const onEdgesChange = useCallback((changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)), [setEdges]);
  const onConnect = useCallback(
    (connection: Connection) => setEdges((eds) => addEdge({ ...connection, animated: true, style: { strokeWidth: 2 } }, eds)),
    [setEdges]
  );

  const updateIntentNode = useCallback((nodeId: string, newIntentId: string) => {
    setNodes((nds) =>
      nds.map((node) =>
        node.id === nodeId ? { ...node, data: { ...node.data, intentId: newIntentId } } : node
      )
    );
    // Update selected node state if it's the one being changed
    setSelectedNode((prev) =>
      prev && prev.id === nodeId ? { ...prev, data: { ...prev.data, intentId: newIntentId } } : prev
    );
  }, [setNodes]);

  // Updated to handle the full ActionDefinition
  const updateActionNode = useCallback(
    (nodeId: string, actionData: Omit<ActionDefinition, 'id'>) => {
      setNodes((nds) =>
        nds.map((node) =>
          node.id === nodeId ? { ...node, data: { ...node.data, ...actionData } } : node
        )
      );
       // Update selected node state if it's the one being changed
      setSelectedNode((prev) =>
        prev && prev.id === nodeId ? { ...prev, data: { ...prev.data, ...actionData } } : prev
      );
    },
    [setNodes]
  );

  const onSelectionChange = useCallback(({ nodes: selectedNodes }: OnSelectionChangeParams) => {
    const newSelectedNode = selectedNodes.length === 1 ? selectedNodes[0] : null;
    setSelectedNode(newSelectedNode);
    setIsFabMenuOpen(false);
    // Open sidebar automatically if a configurable node is selected and sidebar isn't already open
    if (newSelectedNode && (newSelectedNode.type === 'intent' || newSelectedNode.type === 'action') && !isSidebarOpen) {
       // setIsSidebarOpen(true); // Optional: auto-open sidebar on selection
    }
  }, [isSidebarOpen]); // Added isSidebarOpen dependency

  const clearSelectionAndCloseFab = useCallback(() => {
    const currentlySelectedNodeId = selectedNode?.id;
    setSelectedNode(null);
    setIsFabMenuOpen(false);
    setIsSidebarOpen(false);
    if (currentlySelectedNodeId) {
      rfSetNodes(
        getNodes().map((node) =>
          node.id === currentlySelectedNodeId || node.selected
            ? { ...node, selected: false }
            : node
        )
      );
    }
  }, [selectedNode, rfSetNodes, getNodes]);

  const getCenterPosition = useCallback((): XYPosition => {
    const flowPane = document.querySelector('.react-flow__pane');
    if (flowPane) {
      const bounds = flowPane.getBoundingClientRect();
      return screenToFlowPosition({ x: bounds.width / 2, y: bounds.height / 3 });
    }
    return { x: 200 + Math.random() * 50, y: 100 + Math.random() * 50 };
  }, [screenToFlowPosition]);

  const handleAddNode = useCallback(
    (type: 'intent' | 'action' | 'end' | 'start') => {
      const position = getCenterPosition();
      let newNodeData: any = {}; // Use 'any' temporarily or define a broader type
      if (type === 'intent') {
        newNodeData = { intentId: 'intent_greet' }; // Default intent
      } else if (type === 'action') {
        // Use the first defined action as default or a generic placeholder
        const defaultAction = definedActions[0] || { title: 'New Action', name: 'NewAction', value: 'Configure me...', valueType: 'text' };
        newNodeData = { ...defaultAction };
      }
      // Start and End nodes have empty data initially

      const newNode: Node = { id: getId(), type, position, data: newNodeData };
      addNodes(newNode);
      setIsFabMenuOpen(false);
    },
    [addNodes, getCenterPosition, definedActions] // Add definedActions dependency
  );

  // Callback to add a newly defined action type
  const handleAddNewActionDefinition = useCallback((newAction: ActionDefinition) => {
    setDefinedActions(prev => [...prev, newAction]);
    // In a real app, you'd likely save this to a backend/storage here
    console.log("Added new action definition:", newAction);
  }, [setDefinedActions]);


  const toggleFabMenu = () => { setSelectedNode(null); setIsFabMenuOpen((prev) => !prev);};

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (fabRef.current && !fabRef.current.contains(event.target as Node)) {
        setIsFabMenuOpen(false);
      }
      // Consider closing sidebar on outside click too, if desired
      // const sidebarElement = document.querySelector('.sidebar-container'); // Add a class to sidebar div
      // if (sidebarElement && !sidebarElement.contains(event.target as Node) && isSidebarOpen) {
      //    setIsSidebarOpen(false);
      // }
    };
    if (isFabMenuOpen) document.addEventListener('mousedown', handleClickOutside);
    else document.removeEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [isFabMenuOpen]); // Removed isSidebarOpen dependency for this effect

  const fabMenuVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        staggerChildren: 0.07,
        delayChildren: 0.1,
      },
    },
    exit: { opacity: 0, y: 10, transition: { duration: 0.1 } },
  };

  const fabItemVariants = {
    hidden: { opacity: 0, y: 10, scale: 0.9 },
    visible: { opacity: 1, y: 0, scale: 1 },
  };

  const sidebarVariants = {
    hidden: { x: '100%', opacity: 0 },
    visible: { x: 0, opacity: 1, transition: { type: 'tween', duration: 0.3, ease: 'easeOut' } },
    exit: { x: '100%', opacity: 0, transition: { type: 'tween', duration: 0.2, ease: 'easeIn' } },
  };

  return (
    <div className="h-screen w-screen flex overflow-hidden">
      {/* Main Flow Area */}
      <div className="flex-grow h-full relative">
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onConnect={onConnect}
          onSelectionChange={onSelectionChange}
          onPaneClick={clearSelectionAndCloseFab}
          nodeTypes={nodeTypes}
          defaultEdgeOptions={defaultEdgeOptions}
          fitView
          className="bg-gradient-to-br from-blue-50 to-indigo-100"
        >
          <Controls />
          <Background />
        </ReactFlow>

        {/* Floating Configuration Button */}
        {selectedNode &&
          (selectedNode.type === 'intent' || selectedNode.type === 'action') &&
          !isSidebarOpen && (
            <div className="absolute bottom-24 right-6 z-30">
              <motion.button
                onClick={() => setIsSidebarOpen(true)}
                className="flex items-center justify-center w-14 h-14 bg-gray-700 text-white rounded-full shadow-xl hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors duration-200 ease-in-out"
                title="Configure Node"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Settings size={28} />
              </motion.button>
            </div>
          )}

        {/* Floating Action Button Menu */}
        <div ref={fabRef} className="absolute bottom-6 right-6 z-20">
          <AnimatePresence>
            {isFabMenuOpen && (
              <motion.div
                className="flex flex-col items-end space-y-2 mb-2"
                variants={fabMenuVariants}
                initial="hidden"
                animate="visible"
                exit="exit"
              >
                <motion.button
                  variants={fabItemVariants}
                  onClick={() => handleAddNode('start')}
                  className="flex items-center justify-center w-12 h-12 bg-purple-500 text-white rounded-full shadow-lg hover:bg-purple-600 transition-colors duration-200 ease-in-out transform hover:scale-105"
                  title="Add Start Node"
                >
                  <PlayCircle size={20} />
                </motion.button>
                <motion.button
                  variants={fabItemVariants}
                  onClick={() => handleAddNode('intent')}
                  className="flex items-center justify-center w-12 h-12 bg-blue-500 text-white rounded-full shadow-lg hover:bg-blue-600 transition-colors duration-200 ease-in-out transform hover:scale-105"
                  title="Add Intent Node"
                >
                  <Bot size={20} />
                </motion.button>
                <motion.button
                  variants={fabItemVariants}
                  onClick={() => handleAddNode('action')}
                  className="flex items-center justify-center w-12 h-12 bg-green-500 text-white rounded-full shadow-lg hover:bg-green-600 transition-colors duration-200 ease-in-out transform hover:scale-105"
                  title="Add Action Node"
                >
                  <Zap size={20} />
                </motion.button>
                <motion.button
                  variants={fabItemVariants}
                  onClick={() => handleAddNode('end')}
                  className="flex items-center justify-center w-12 h-12 bg-red-500 text-white rounded-full shadow-lg hover:bg-red-600 transition-colors duration-200 ease-in-out transform hover:scale-105"
                  title="Add End Node"
                >
                  <FlagOff size={20} />
                </motion.button>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Main FAB */}
          <motion.button
            onClick={toggleFabMenu}
            className="flex items-center justify-center w-14 h-14 bg-indigo-600 text-white rounded-full shadow-xl hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors duration-200 ease-in-out"
            title={isFabMenuOpen ? 'Close Menu' : 'Add Node'}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            animate={{ rotate: isFabMenuOpen ? 45 : 0 }}
            transition={{ type: 'spring', stiffness: 400, damping: 15 }}
          >
            <Plus size={28} />
          </motion.button>
        </div>
      </div>

      {/* Animated Sidebar */}
      <AnimatePresence>
        {isSidebarOpen && selectedNode && ( // Ensure selectedNode exists before rendering Sidebar
          <motion.div
            key="sidebar"
            variants={sidebarVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            className="w-72 h-full flex-shrink-0 sidebar-container" // Added class for potential outside click handling
          >
            <Sidebar
              selectedNode={selectedNode} // Pass the selected node
              definedActions={definedActions} // Pass defined actions
              onUpdateIntent={updateIntentNode}
              onUpdateAction={updateActionNode}
              onAddNewActionDefinition={handleAddNewActionDefinition} // Pass handler for new definitions
              onClose={() => setIsSidebarOpen(false)}
            />
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

function Flow() {
  return (
    <ReactFlowProvider>
      <FlowContent />
    </ReactFlowProvider>
  );
}

export default Flow;


./src/components/Sidebar.tsx
// File: Sidebar.tsx

import React, { useState, useEffect } from 'react';
import { Node } from 'reactflow';
import { Bot, Zap, X, PlusCircle, Type, Code, Edit, GitBranch, Replace } from 'lucide-react';
import { ActionDefinition, AvailableFunction, IntentDefinition } from '../types'; // Import types

// Mock data - In a real app, this would come from state management or an API
const intents: IntentDefinition[] = [
  { id: 'intent_greet', label: 'Greeting' },
  { id: 'intent_order', label: 'Place Order' },
  { id: 'intent_support', label: 'Request Support' },
  { id: 'intent_goodbye', label: 'Goodbye' },
  { id: 'intent_faq_shipping', label: 'FAQ - Shipping' },
  { id: 'intent_faq_returns', label: 'FAQ - Returns' },
];

// Mock list of available functions
const availableFunctions: AvailableFunction[] = [
  { name: 'getUserData', description: 'Fetches current user data' },
  { name: 'createSupportTicket', description: 'Creates a new support ticket' },
  { name: 'lookupOrder', description: 'Looks up an order by ID' },
  { name: 'sendConfirmationEmail', description: 'Sends a confirmation email' },
];

interface SidebarProps {
  selectedNode: Node | null;
  definedActions: ActionDefinition[]; // Receive defined actions from Flow
  onUpdateIntent: (nodeId: string, newIntentId: string) => void;
  onUpdateAction: (nodeId: string, actionData: Omit<ActionDefinition, 'id'>) => void; // Updated signature
  onAddNewActionDefinition: (newAction: ActionDefinition) => void; // Callback to add new action types
  onClose: () => void;
}

type ActiveTab = 'intents' | 'actions';
type ValueInputType = 'text' | 'function';
type SidebarMode = 'view' | 'edit' | 'change'; // Keep 'change' mode

const Sidebar: React.FC<SidebarProps> = ({
  selectedNode,
  definedActions,
  onUpdateIntent,
  onUpdateAction,
  onAddNewActionDefinition,
  onClose
}) => {
  const [activeTab, setActiveTab] = useState<ActiveTab>('intents');
  const [mode, setMode] = useState<SidebarMode>('view'); // Control view, edit, or change mode

  // --- State for Node Configuration ---
  const [currentActionConfig, setCurrentActionConfig] = useState<Omit<ActionDefinition, 'id'>>({
    title: '', name: '', value: '', valueType: 'text'
  });
  const [currentValueInputType, setCurrentValueInputType] = useState<ValueInputType>('text');
  const [currentIntentId, setCurrentIntentId] = useState<string>('');

  // --- State for New Intent Dialog ---
  const [showIntentDialog, setShowIntentDialog] = useState(false);
  const [newIntentName, setNewIntentName] = useState('');
  const [exampleInputs, setExampleInputs] = useState<string[]>(['']);

  // --- State for New Action Dialog ---
  const [showActionDialog, setShowActionDialog] = useState(false);
  const [newActionTitle, setNewActionTitle] = useState('');
  const [newActionName, setNewActionName] = useState('');
  const [newActionValue, setNewActionValue] = useState('');
  const [newActionValueType, setNewActionValueType] = useState<ValueInputType>('text');

  // --- Effects ---
  // Update active tab, configuration state, and reset mode when selectedNode changes
  useEffect(() => {
    setMode('view'); // Reset mode on node change
    if (selectedNode?.type === 'intent') {
      setActiveTab('intents');
      setCurrentIntentId(selectedNode.data.intentId || '');
    } else if (selectedNode?.type === 'action') {
      setActiveTab('actions');
      const initialConfig = {
        title: selectedNode.data.title || selectedNode.data.name || '',
        name: selectedNode.data.name || '',
        value: selectedNode.data.value || '',
        valueType: selectedNode.data.valueType || 'text',
      };
      setCurrentActionConfig(initialConfig);
      setCurrentValueInputType(initialConfig.valueType);
    } else {
      setCurrentActionConfig({ title: '', name: '', value: '', valueType: 'text' });
      setCurrentValueInputType('text');
      setCurrentIntentId('');
    }
  }, [selectedNode]);


  // --- Event Handlers ---
  // Called when selecting an intent from the list (in 'change' mode)
  const handleIntentSelect = (intentId: string) => {
    if (selectedNode && selectedNode.type === 'intent') {
      setCurrentIntentId(intentId); // Update local state first
      onUpdateIntent(selectedNode.id, intentId); // Then update the actual node
      setMode('view'); // Exit change mode after selection
    }
  };

  // Called when selecting a pre-defined action from the list (in 'change' mode)
  const handleDefinedActionSelect = (action: ActionDefinition) => {
    if (selectedNode && selectedNode.type === 'action') {
      const newConfig = {
        title: action.title,
        name: action.name,
        value: action.value,
        valueType: action.valueType,
      };
      setCurrentActionConfig(newConfig); // Update local state
      setCurrentValueInputType(action.valueType);
      onUpdateAction(selectedNode.id, newConfig); // Update the actual node
      setMode('view'); // Exit change mode after applying
    }
  };

  // Called when editing fields in 'edit' mode (only for Action nodes now)
  const handleConfigChange = (field: keyof Omit<ActionDefinition, 'id'>, value: string | ValueInputType) => {
    const newConfig = { ...currentActionConfig, [field]: value };
    setCurrentActionConfig(newConfig);
    // Update node immediately while editing
    if (selectedNode && selectedNode.type === 'action') {
       onUpdateAction(selectedNode.id, newConfig);
    }
  };

  // Called when toggling value type in 'edit' mode (only for Action nodes)
  const handleValueTypeToggle = (type: ValueInputType) => {
    setCurrentValueInputType(type);
    const newValue = type === 'function' ? (availableFunctions[0]?.name || '') : '';
    // Update both value and valueType in the config and the node
    const newConfig = {
      ...currentActionConfig,
      value: newValue,
      valueType: type
    };
    setCurrentActionConfig(newConfig);
     if (selectedNode && selectedNode.type === 'action') {
      onUpdateAction(selectedNode.id, newConfig);
    }
  };

  // --- Intent Dialog Handlers ---
  const handleAddExampleInput = () => setExampleInputs((prev) => [...prev, '']);
  const handleExampleChange = (index: number, value: string) => {
    setExampleInputs((prev) => {
      const newInputs = [...prev];
      newInputs[index] = value;
      return newInputs;
    });
  };
  const handleIntentDialogSubmit = () => {
    const examplesArray = exampleInputs.map(example => example.trim()).filter(example => example !== '');
    console.log('New intent definition:', { name: newIntentName, examples: examplesArray });
    // TODO: Add logic to actually save the new intent definition
    // TODO: Update the `intents` array state (if managed locally) or refetch
    setNewIntentName('');
    setExampleInputs(['']);
    setShowIntentDialog(false);
  };

  // --- Action Dialog Handlers ---
  const handleNewActionValueTypeToggle = (type: ValueInputType) => {
    setNewActionValueType(type);
    setNewActionValue(type === 'function' ? (availableFunctions[0]?.name || '') : '');
  };

  const handleActionDialogSubmit = () => {
    const finalValue = newActionValueType === 'function' ? newActionValue : newActionValue;
    const newActionDefinition: ActionDefinition = {
      title: newActionTitle.trim() || newActionName.trim(),
      name: newActionName.trim(),
      value: finalValue,
      valueType: newActionValueType,
    };
    if (!newActionDefinition.name) {
      alert("Action Name is required.");
      return;
    }
    onAddNewActionDefinition(newActionDefinition);
    setNewActionTitle('');
    setNewActionName('');
    setNewActionValue('');
    setNewActionValueType('text');
    setShowActionDialog(false);
  };

  // --- Render Logic ---
  if (!selectedNode || (selectedNode.type !== 'intent' && selectedNode.type !== 'action')) {
    return null;
  }

  const isActionNodeSelected = selectedNode.type === 'action';
  const isIntentNodeSelected = selectedNode.type === 'intent';

  // Get current data directly from selectedNode for display in view mode
  const currentIntentLabel = intents.find(i => i.id === selectedNode.data.intentId)?.label || selectedNode.data.intentId || 'N/A';
  const currentActionTitle = selectedNode.data.title || selectedNode.data.name || 'N/A';
  const currentActionName = selectedNode.data.name || 'N/A';
  const currentActionValue = selectedNode.data.value || 'N/A';
  const currentActionValueType = selectedNode.data.valueType || 'text';

  return (
    <div className="relative w-72 bg-white border-l border-gray-200 shadow-lg flex flex-col h-full transition-all duration-300 ease-in-out z-10">
      {/* Header */}
      <div className="p-4 border-b border-gray-200 flex justify-between items-center min-h-[60px]">
        <h3 className="text-lg font-semibold text-gray-800">
          {isActionNodeSelected ? 'Action Node' : 'Intent Node'}
        </h3>
        <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
          <X size={20} />
        </button>
      </div>

      {/* Tabs */}
      <div className="flex border-b border-gray-200">
        {isIntentNodeSelected && (
          <div className={`flex-1 py-2 px-4 text-sm font-medium text-center flex items-center justify-center gap-1 border-b-2 border-blue-500 text-blue-600`}>
            <Bot size={16} /> Intent
          </div>
        )}
        {isActionNodeSelected && (
          <div className={`flex-1 py-2 px-4 text-sm font-medium text-center flex items-center justify-center gap-1 border-b-2 border-green-500 text-green-600`}>
            <Zap size={16} /> Action
          </div>
        )}
      </div>

      {/* Content Area */}
      <div className="flex-grow overflow-y-auto p-4 space-y-6">

        {/* View Mode */}
        {mode === 'view' && (
          <div className="space-y-3">
            <h4 className="text-md font-semibold text-gray-700 mb-2">Current Configuration</h4>
            {isIntentNodeSelected && (
              <>
                <p className="text-sm"><span className="text-gray-500">Intent:</span> <span className="font-medium text-blue-700">{currentIntentLabel}</span></p>
                <p className="text-sm"><span className="text-gray-500">ID:</span> <code className="text-xs bg-blue-100 text-blue-700 px-1 py-0.5 rounded">{selectedNode.data.intentId || 'N/A'}</code></p>
              </>
            )}
            {isActionNodeSelected && (
              <>
                <p className="text-sm"><span className="text-gray-500">Title:</span> <span className="font-medium text-gray-800">{currentActionTitle}</span></p>
                <p className="text-sm"><span className="text-gray-500">Name:</span> <span className="font-medium text-green-700">{currentActionName}</span></p>
                <div className="text-sm flex items-center gap-2">
                  <span className="text-gray-500">{currentActionValueType === 'function' ? 'Function:' : 'Value:'}</span>
                  {currentActionValueType === 'function' && <GitBranch size={14} className="text-gray-500" />}
                  <code className="text-xs bg-green-100 text-green-700 px-1 py-0.5 rounded break-all">{currentActionValue}</code>
                </div>
              </>
            )}
            {/* Edit and Change Buttons */}
            <div className="mt-4 flex gap-2">
               {isActionNodeSelected && ( // Only show Edit for Action nodes
                 <button
                   onClick={() => setMode('edit')}
                   className="flex-1 flex items-center justify-center gap-2 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 text-sm font-medium"
                 >
                   <Edit size={16} /> Edit Details
                 </button>
               )}
               {isActionNodeSelected && ( // Show Change Type for Action nodes
                 <button
                   onClick={() => setMode('change')}
                   className="flex-1 flex items-center justify-center gap-2 bg-gray-200 text-gray-700 px-4 py-2 rounded hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 text-sm font-medium"
                 >
                   <Replace size={16} /> Change Type
                 </button>
               )}
               {isIntentNodeSelected && ( // Show Edit for Intent nodes
                 <button
                   onClick={() => setMode('edit')}
                   // make the button outline
                   className='flex-1 flex items-center justify-center gap-2 border border-blue-700 text-blue-700 px-4 py-2 rounded hover:bg-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm font-medium'
              
                 >
                   <Edit size={16} /> Edit Details
                 </button>
               )}
                {isIntentNodeSelected && ( // Show Change Intent for Intent nodes
                 <button
                   onClick={() => setMode('change')} // Intent 'Change' button now sets mode to 'change'
                   className="flex-1 flex items-center justify-center gap-2 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm font-medium"
                 >
                   <Replace size={16} /> Change Intent
                 </button>
               )}
            </div>
          </div>
        )}

        {/* Edit Mode (Only for Action Nodes) */}
        {mode === 'edit' && isActionNodeSelected && (
          <div className="space-y-4">
            <h4 className="text-md font-semibold text-gray-700 mb-1">Edit Action Details</h4>
             {/* Configuration Fields */}
             <div>
               <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="actionConfigTitle">
                 Title
               </label>
               <input
                 id="actionConfigTitle"
                 type="text"
                 value={currentActionConfig.title}
                 onChange={(e) => handleConfigChange('title', e.target.value)}
                 className="block w-full border border-gray-300 rounded-md p-2 focus:ring-green-500 focus:border-green-500 shadow-sm text-sm"
                 placeholder="User-friendly title"
               />
             </div>
             <div>
               <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="actionConfigName">
                 Name (Identifier)
               </label>
               <input
                 id="actionConfigName"
                 type="text"
                 value={currentActionConfig.name}
                 onChange={(e) => handleConfigChange('name', e.target.value)}
                 className="block w-full border border-gray-300 rounded-md p-2 focus:ring-green-500 focus:border-green-500 shadow-sm text-sm"
                 placeholder="Code-friendly name (e.g., SendEmail)"
               />
             </div>
             <div>
               <label className="block text-sm font-medium text-gray-700 mb-1">Value Type</label>
               <div className="flex gap-2">
                  <button
                    onClick={() => handleValueTypeToggle('text')}
                    className={`flex items-center gap-1 px-3 py-1 rounded border text-sm ${currentValueInputType === 'text' ? 'bg-green-100 border-green-300 text-green-800' : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'}`}
                  >
                    <Type size={14} /> Text
                  </button>
                  <button
                    onClick={() => handleValueTypeToggle('function')}
                    className={`flex items-center gap-1 px-3 py-1 rounded border text-sm ${currentValueInputType === 'function' ? 'bg-gray-100 border-gray-300 text-gray-800' : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'}`} // Adjusted function button style
                  >
                    <GitBranch size={14} /> Function
                  </button>
               </div>
             </div>

             {/* Conditional Value Input */}
             {currentValueInputType === 'text' ? (
               <div>
                 <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="actionConfigValueText">
                   Text Value
                 </label>
                 <textarea
                   id="actionConfigValueText"
                   value={currentActionConfig.value}
                   onChange={(e) => handleConfigChange('value', e.target.value)}
                   className="block w-full border border-gray-300 rounded-md p-2 focus:ring-green-500 focus:border-green-500 shadow-sm text-sm font-mono"
                   placeholder="Enter text content, JSON, URL, etc."
                   rows={3}
                 />
               </div>
             ) : (
               <div>
                 <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="actionConfigValueFunction">
                   Select Function
                 </label>
                 <select
                   id="actionConfigValueFunction"
                   value={currentActionConfig.value}
                   onChange={(e) => handleConfigChange('value', e.target.value)}
                   className="block w-full border border-gray-300 rounded-md p-2 focus:ring-gray-500 focus:border-gray-500 shadow-sm text-sm" // Adjusted focus ring
                 >
                   {availableFunctions.length === 0 && <option disabled>No functions available</option>}
                   {availableFunctions.map(func => (
                     <option key={func.name} value={func.name} title={func.description}>
                       {func.name}
                     </option>
                   ))}
                 </select>
                  <p className="text-xs text-gray-500 mt-1">
                    {availableFunctions.find(f => f.name === currentActionConfig.value)?.description}
                  </p>
               </div>
             )}
              {/* Button to finish editing */}
              <button
                onClick={() => setMode('view')}
                className="mt-4 w-full flex items-center justify-center gap-2 bg-gray-200 text-gray-700 px-4 py-2 rounded hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 text-sm font-medium"
              >
                 Done Editing
              </button>
          </div>
        )}

        {mode === 'edit' && isIntentNodeSelected && (
          <div>
            <h4 className="text-md font-semibold text-gray-700 mb-3">Edit Intent</h4>
            <p className="text-xs text-gray-500 mb-3">Edit the intent assigned to this node.</p>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="intentId">
                Intent ID
              </label>
              <input
                id="intentId"
                type="text"
                value={currentIntentId}
                onChange={(e) => handleIntentSelect(e.target.value)}
                className="block w-full border border-gray-300 rounded-md p-2 focus:ring-gray-500 focus:border-gray-500 shadow-sm text-sm"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="intentLabel">
                Examples 
              </label>
              <textarea
                id="intentLabel"
                value={currentIntentId}
                onChange={(e) => handleIntentSelect(e.target.value)}
                className="block w-full border border-gray-300 rounded-md p-2 focus:ring-gray-500 focus:border-gray-500 shadow-sm text-sm"
              />
            </div>
          </div>
        )}

        {/* Change Mode */}
        {mode === 'change' && (
          <>
            {/* Change Intent Selection */}
            {isIntentNodeSelected && (
              <div>
                <h4 className="text-md font-semibold text-gray-700 mb-3">Change Intent</h4>
                <p className="text-xs text-gray-500 mb-3">Select an intent to assign to this node.</p>
                <ul className="space-y-1 max-h-96 overflow-y-auto border rounded p-1">
                  {intents.map((intent) => (
                    <li key={intent.id}>
                      <button
                        onClick={() => handleIntentSelect(intent.id)} // Select and exit change mode
                        className={`w-full text-left px-3 py-1.5 text-sm rounded transition-colors ${
                          currentIntentId === intent.id // Use local state for selection highlight
                            ? 'bg-blue-100 text-blue-800 font-medium'
                            : 'text-gray-600 hover:bg-gray-100'
                        }`}
                        title={intent.label}
                      >
                        {intent.label} (<code className="text-xs">{intent.id}</code>)
                      </button>
                    </li>
                  ))}
                </ul>
                 <button
                    onClick={() => setMode('view')}
                    className="mt-4 w-full flex items-center justify-center gap-2 bg-gray-200 text-gray-700 px-4 py-2 rounded hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 text-sm font-medium"
                  >
                     Cancel Change
                  </button>
              </div>
            )}

            {/* Change Action Type Selection */}
            {isActionNodeSelected && (
               <div>
                  <h4 className="text-md font-semibold text-gray-700 mb-2">Change Action Type</h4>
                  <p className="text-xs text-gray-500 mb-3">Select a predefined action type to replace the current node's configuration.</p>
                  <ul className="space-y-1 max-h-96 overflow-y-auto border rounded p-1">
                    {definedActions.map((action, index) => (
                      <li key={`${action.name}-${index}`}>
                        <button
                          onClick={() => handleDefinedActionSelect(action)} // Apply selected action and exit change mode
                          className={`w-full text-left px-3 py-1.5 text-sm rounded transition-colors flex justify-between items-center text-gray-600 hover:bg-gray-100`}
                          title={`${action.name} - ${action.valueType}: ${action.value}`}
                        >
                          <span>{action.title || action.name}</span>
                          {action.valueType === 'function' && <GitBranch size={14} className="text-gray-500 ml-2"/>}
                        </button>
                      </li>
                    ))}
                  </ul>
                   <button
                      onClick={() => setMode('view')}
                      className="mt-4 w-full flex items-center justify-center gap-2 bg-gray-200 text-gray-700 px-4 py-2 rounded hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 text-sm font-medium"
                    >
                       Cancel Change
                    </button>
               </div>
            )}
          </>
        )}
      </div>

      {/* Footer Buttons for Defining New Types */}
      <div className="p-4 border-t border-gray-200 flex justify-end">
        {/* Keep Define New Intent/Action buttons regardless of mode */}
        {isIntentNodeSelected && (
          <button
            onClick={() => setShowIntentDialog(true)}
            className="flex items-center gap-1 bg-blue-600 text-white px-3 py-2 rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
          >
            <Bot size={16} /> Define New Intent
          </button>
        )}
        {isActionNodeSelected && (
          <button
            onClick={() => setShowActionDialog(true)}
            className="flex items-center gap-1 bg-green-600 text-white px-3 py-2 rounded hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 text-sm"
          >
            <Zap size={16} /> Define New Action
          </button>
        )}
      </div>

      {/* --- DIALOGS --- */}
      {/* Dialog Modal for Defining New Intent */}
      {showIntentDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md relative max-h-[80vh] flex flex-col">
            <button onClick={() => setShowIntentDialog(false)} className="absolute top-3 right-3 text-gray-400 hover:text-gray-600" title="Close"><X size={20} /></button>
            <h4 className="text-lg font-semibold mb-4 text-gray-800">Define New Intent</h4>
            <div className="flex-grow overflow-y-auto pr-2 -mr-2 space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="intentName">Intent Name</label>
                <input id="intentName" type="text" value={newIntentName} onChange={(e) => setNewIntentName(e.target.value)} className="block w-full border border-gray-300 rounded-md p-2 focus:ring-blue-500 focus:border-blue-500 shadow-sm text-sm" placeholder="e.g., OrderPizza" />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Example User Inputs</label>
                {exampleInputs.map((example, index) => (
                  <div key={index} className="mt-2 flex items-center gap-2">
                    <input type="text" value={example} onChange={(e) => handleExampleChange(index, e.target.value)} className="block w-full border border-gray-300 rounded-md p-2 focus:ring-blue-500 focus:border-blue-500 shadow-sm text-sm" placeholder={`Example ${index + 1} (e.g., "I want a pizza")`} />
                    {index === exampleInputs.length - 1 && (<button onClick={handleAddExampleInput} type="button" className="text-blue-600 hover:text-blue-800 p-1 rounded-full hover:bg-blue-100" title="Add another example"><PlusCircle size={20} /></button>)}
                  </div>
                ))}
                <p className="text-xs text-gray-500 mt-1">Provide examples of how a user might express this intent.</p>
              </div>
            </div>
            <div className="flex justify-end gap-2 pt-4 border-t border-gray-200 mt-4">
              <button onClick={() => setShowIntentDialog(false)} className="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md font-medium">Cancel</button>
              <button onClick={handleIntentDialogSubmit} className="px-4 py-2 text-sm text-white bg-blue-600 hover:bg-blue-700 rounded-md font-medium">Create Intent Definition</button>
            </div>
          </div>
        </div>
      )}

      {/* Dialog Modal for Defining New Action */}
      {showActionDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md relative max-h-[80vh] flex flex-col">
            <button onClick={() => setShowActionDialog(false)} className="absolute top-3 right-3 text-gray-400 hover:text-gray-600" title="Close"><X size={20} /></button>
            <h4 className="text-lg font-semibold mb-4 text-gray-800">Define New Action</h4>
            <div className="flex-grow overflow-y-auto pr-2 -mr-2 space-y-4">
              {/* Title Input */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="newActionTitle">Title</label>
                <input id="newActionTitle" type="text" value={newActionTitle} onChange={(e) => setNewActionTitle(e.target.value)} className="block w-full border border-gray-300 rounded-md p-2 focus:ring-green-500 focus:border-green-500 shadow-sm text-sm" placeholder="User-friendly title (e.g., Send Confirmation)" />
                <p className="text-xs text-gray-500 mt-1">A short, descriptive title.</p>
              </div>
              {/* Name Input */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="newActionName">Name (Identifier)</label>
                <input id="newActionName" type="text" value={newActionName} onChange={(e) => setNewActionName(e.target.value)} className="block w-full border border-gray-300 rounded-md p-2 focus:ring-green-500 focus:border-green-500 shadow-sm text-sm" placeholder="Code-friendly name (e.g., SendEmail)" />
                <p className="text-xs text-gray-500 mt-1">A unique identifier for the action.</p>
              </div>
              {/* Value Type Toggle */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Value Type</label>
                 <div className="flex gap-2">
                   <button onClick={() => handleNewActionValueTypeToggle('text')} className={`flex items-center gap-1 px-3 py-1 rounded border text-sm ${newActionValueType === 'text' ? 'bg-green-100 border-green-300 text-green-800' : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'}`}><Type size={14} /> Text</button>
                   <button onClick={() => handleNewActionValueTypeToggle('function')} className={`flex items-center gap-1 px-3 py-1 rounded border text-sm ${newActionValueType === 'function' ? 'bg-gray-100 border-gray-300 text-gray-800' : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'}`}><GitBranch size={14} /> Function</button> {/* Updated Icon */}
                 </div>
              </div>
              {/* Conditional Value Input for Dialog */}
              {newActionValueType === 'text' ? (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="newActionValueText">Text Value</label>
                  <textarea id="newActionValueText" value={newActionValue} onChange={(e) => setNewActionValue(e.target.value)} className="block w-full border border-gray-300 rounded-md p-2 focus:ring-green-500 focus:border-green-500 shadow-sm text-sm font-mono" placeholder="Enter text, JSON, URL, etc." rows={4} />
                  <p className="text-xs text-gray-500 mt-1">The static value or configuration for this action.</p>
                </div>
              ) : (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="newActionValueFunction">Select Function</label>
                  <select id="newActionValueFunction" value={newActionValue} onChange={(e) => setNewActionValue(e.target.value)} className="block w-full border border-gray-300 rounded-md p-2 focus:ring-gray-500 focus:border-gray-500 shadow-sm text-sm"> {/* Adjusted focus ring */}
                    {availableFunctions.length === 0 && <option value="" disabled>No functions available</option>}
                    {availableFunctions.map(func => (<option key={func.name} value={func.name} title={func.description}>{func.name}</option>))}
                  </select>
                  <p className="text-xs text-gray-500 mt-1">Select the function this action should execute.</p>
                </div>
              )}
            </div>
            {/* Dialog Footer */}
            <div className="flex justify-end gap-2 pt-4 border-t border-gray-200 mt-4">
              <button onClick={() => setShowActionDialog(false)} className="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md font-medium">Cancel</button>
              <button onClick={handleActionDialogSubmit} className="px-4 py-2 text-sm text-white bg-green-600 hover:bg-green-700 rounded-md font-medium">Create Action Definition</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Sidebar;


./src/components/nodes/ActionNode.tsx
import React from 'react';
import { Handle, Position, NodeProps } from 'reactflow';
import { Zap, GitBranch } from 'lucide-react'; // Import GitBranch icon
import { motion } from 'framer-motion';

// Updated data structure for Action Nodes
interface ActionNodeData {
  title: string; // User-friendly title
  name: string; // Action identifier (e.g., SendMessage, ApiCall)
  value: string; // The actual text value or the selected function name
  valueType: 'text' | 'function'; // Type indicator
}

const ActionNode: React.FC<NodeProps<ActionNodeData>> = ({ data, selected }) => {
  const isFunction = data.valueType === 'function';

  return (
    <motion.div
      className={`bg-white border-2 ${selected ? 'border-green-500 shadow-lg' : 'border-green-300'} rounded-lg shadow-md p-4 w-60 transition-colors duration-150 ease-in-out`}
      initial={{ scale: 1 }}
      animate={{ scale: selected ? 1.03 : 1 }}
      transition={{ type: "spring", stiffness: 300, damping: 20 }}
    >
      <Handle type="target" position={Position.Left} className="w-3 h-3 !bg-green-500 !border-white !border-2 rounded-full -left-2 top-1/2 transform -translate-y-1/2" />
      <div className="flex items-center justify-between mb-3 pb-2 border-b border-green-200">
        <div className="flex items-center">
          <div className="p-1.5 bg-green-100 rounded-full mr-2">
            <Zap className="w-4 h-4 text-green-600" />
          </div>
          <strong className="text-green-800 font-semibold">Action</strong>
        </div>
        {/* Function Indicator - Using GitBranch icon */}
        {isFunction && (
          <div className="p-1 bg-gray-100 rounded-full" title="Uses a function">
            <GitBranch className="w-3 h-3 text-gray-600" />
          </div>
        )}
      </div>
      <div className="text-sm mb-1 text-gray-600">
        Title: <span className="font-medium text-gray-800">{data.title || data.name}</span>
      </div>
      <div className="text-sm mb-1 text-gray-600">
        Name: <span className="font-medium text-green-700">{data.name}</span>
      </div>
      <div className="text-sm text-gray-600">
        {isFunction ? 'Function:' : 'Value:'}
        {/* Consistent styling for value code block */}
        <code className="block bg-green-100 text-green-700 px-1.5 py-0.5 rounded text-xs break-words mt-1" title={data.value}>
          {data.value}
        </code>
      </div>
      <Handle type="source" position={Position.Right} className="w-3 h-3 !bg-green-500 !border-white !border-2 rounded-full -right-2 top-1/2 transform -translate-y-1/2" />
    </motion.div>
  );
};

export default ActionNode;


./src/components/nodes/EndNode.tsx
import React from 'react';
import { Handle, Position, NodeProps } from 'reactflow';
import { FlagOff } from 'lucide-react';
import { motion } from 'framer-motion'; // Import motion

const EndNode: React.FC<NodeProps> = ({ selected }) => {
  return (
    <motion.div
      className={`bg-white border-2 ${selected ? 'border-red-500 shadow-lg' : 'border-red-300'} rounded-full shadow-md p-4 w-28 h-28 flex flex-col items-center justify-center transition-colors duration-150 ease-in-out`}
      initial={{ scale: 1 }}
      animate={{ scale: selected ? 1.03 : 1 }} // Scale up slightly when selected
      transition={{ type: "spring", stiffness: 300, damping: 20 }}
    >
      <Handle type="target" position={Position.Left} className="w-3 h-3 !bg-red-500 !border-white !border-2 rounded-full -left-2 top-1/2 transform -translate-y-1/2" />
       <div className="p-1.5 bg-red-100 rounded-full mb-1">
         <FlagOff className="w-5 h-5 text-red-600" />
       </div>
      <strong className="text-red-800 text-sm font-semibold">End Flow</strong>
      {/* No source handle for the end node */}
    </motion.div>
  );
};

export default EndNode;


./src/components/nodes/IntentNode.tsx
import React from 'react';
import { Handle, Position, NodeProps } from 'reactflow';
import { Bot } from 'lucide-react';
import { motion } from 'framer-motion'; // Import motion
import { IntentDefinition } from '../../types'; // Import type

// Keep intents definition or import/fetch - Now includes examples
const intents: IntentDefinition[] = [
  { id: 'intent_greet', label: 'Greeting', examples: ["hello", "hi", "hey there"] },
  { id: 'intent_order', label: 'Place Order', examples: ["I want to order a pizza", "place an order", "can I get food?"] },
  { id: 'intent_support', label: 'Request Support', examples: ["help me", "I need support", "agent please"] },
  { id: 'intent_goodbye', label: 'Goodbye', examples: ["bye", "see you later", "farewell"] },
  { id: 'intent_faq_shipping', label: 'FAQ - Shipping', examples: ["shipping cost", "how long does shipping take?", "track my package"] },
  { id: 'intent_faq_returns', label: 'FAQ - Returns', examples: ["return policy", "how to return item", "I want a refund"] },
];

interface IntentNodeData {
  intentId: string;
}

const IntentNode: React.FC<NodeProps<IntentNodeData>> = ({ data, selected }) => {
  // Find the intent label based on the ID stored in the node's data
  // The lookup still works the same way, we just don't display examples here.
  const currentIntent = intents.find(intent => intent.id === data.intentId) || { id: data.intentId || 'unknown', label: data.intentId || 'Unknown Intent', examples: [] };

  return (
    <motion.div
      className={`bg-white border-2 ${selected ? 'border-blue-500 shadow-lg' : 'border-blue-300'} rounded-lg shadow-md p-4 w-60 transition-colors duration-150 ease-in-out`}
      initial={{ scale: 1 }}
      animate={{ scale: selected ? 1.03 : 1 }}
      transition={{ type: "spring", stiffness: 300, damping: 20 }}
    >
      <Handle type="target" position={Position.Left} className="w-3 h-3 !bg-blue-500 !border-white !border-2 rounded-full -left-2 top-1/2 transform -translate-y-1/2" />
      <div className="flex items-center mb-3 pb-2 border-b border-blue-200">
        <div className="p-1.5 bg-blue-100 rounded-full mr-2">
           <Bot className="w-4 h-4 text-blue-600" />
        </div>
        <strong className="text-blue-800 font-semibold">Intent</strong>
      </div>
      <div className="text-sm mb-1 text-gray-600">
        Selected Intent:
      </div>
      <div className="text-sm font-medium text-blue-700 mb-2 truncate" title={currentIntent.label}>
        {currentIntent.label}
      </div>
      <div className="text-xs text-gray-500">
        ID: <code className="bg-blue-100 text-blue-700 px-1.5 py-0.5 rounded">{currentIntent.id}</code>
      </div>
      {/* Examples are part of the definition but not displayed on the node */}
      <Handle type="source" position={Position.Right} className="w-3 h-3 !bg-blue-500 !border-white !border-2 rounded-full -right-2 top-1/2 transform -translate-y-1/2" />
    </motion.div>
  );
};

export default IntentNode;


./src/components/nodes/StartNode.tsx
import React from 'react';
import { Handle, Position, NodeProps } from 'reactflow';
import { PlayCircle } from 'lucide-react';
import { motion } from 'framer-motion';

const StartNode: React.FC<NodeProps> = ({ selected }) => {
  return (
    <motion.div
      className={`bg-white border-2 ${selected ? 'border-indigo-500 shadow-lg' : 'border-indigo-300'} rounded-full shadow-md p-4 w-28 h-28 flex flex-col items-center justify-center transition-colors duration-150 ease-in-out`}
      initial={{ scale: 1 }}
      animate={{ scale: selected ? 1.03 : 1 }}
      transition={{ type: "spring", stiffness: 300, damping: 20 }}
    >
      <Handle 
        type="source" 
        position={Position.Right} 
        className="w-3 h-3 !bg-indigo-500 !border-white !border-2 rounded-full -right-2 top-1/2 transform -translate-y-1/2" 
      />
      <div className="p-1.5 bg-indigo-100 rounded-full mb-1">
         <PlayCircle className="w-5 h-5 text-indigo-600" />
      </div>
      <strong className="text-indigo-800 text-sm font-semibold">Start Flow</strong>
    </motion.div>
  );
};

export default StartNode;


./src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;


./src/main.tsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


./src/types.ts
{// Define shared types

export interface ActionDefinition {
  id?: string; // Optional ID, might be added when stored
  title: string;
  name: string; // Unique identifier
  value: string; // Text content or function name
  valueType: 'text' | 'function';
}

export interface AvailableFunction {
  name: string;
  description: string;
}

// You can add other shared types here, e.g., for Intent definitions
export interface IntentDefinition {
  id: string;
  label: string;
  examples?: string[]; // Added optional examples array
}
}


./src/vite-env.d.ts
/// <reference types="vite/client" />


I will ask some modification to do in this code from you. Please give me only the complete modfied files in a code block as per request.
